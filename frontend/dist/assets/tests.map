{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/helpers/ember-simple-auth.js","frontend/tests/integration/components/channel-test.js","frontend/tests/integration/components/contact-test.js","frontend/tests/integration/components/main-test.js","frontend/tests/lint/app.lint-test.js","frontend/tests/lint/templates.template.lint-test.js","frontend/tests/lint/tests.lint-test.js","frontend/tests/test-helper.js","frontend/tests/unit/controllers/channel-test.js","frontend/tests/unit/controllers/contact-test.js","frontend/tests/unit/controllers/register-test.js","frontend/tests/unit/mixins/activate-login-icon-test.js","frontend/tests/unit/models/contacts-test.js","frontend/tests/unit/models/session-test.js","frontend/tests/unit/models/user-data-test.js","frontend/tests/unit/routes/channel-test.js","frontend/tests/unit/routes/contact-test.js","frontend/tests/unit/routes/login-test.js","frontend/tests/unit/routes/main-test.js","frontend/tests/unit/routes/register-test.js","frontend/tests/unit/services/activate-login-icon-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"frontend/tests/helpers/ember-simple-auth\", [\"exports\", \"ember-simple-auth/authenticators/test\"], function (_exports, _test) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.authenticateSession = authenticateSession;\n  _exports.currentSession = currentSession;\n  _exports.invalidateSession = invalidateSession;\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const {\n      __container__: container\n    } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n\n    return app.testHelpers.wait();\n  }\n});","define(\"frontend/tests/integration/components/channel-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | channel', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2NBgaOoU\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"channel\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"WXHiVShd\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"channel\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"frontend/tests/integration/components/contact-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | contact', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cQEnuW7L\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"contact\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"6BxrQMkD\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"contact\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"frontend/tests/integration/components/main-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | main', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2xkYM7Km\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[23,\\\"main\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"mFyPChGG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"main\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"frontend/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('adapters/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('adapters/get-adapter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/get-adapter.js should pass ESLint\\n\\n4:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('authenticators/custom.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/custom.js should pass ESLint\\n\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n13:7 - Unexpected console statement. (no-console)\\n14:12 - \\'Ember\\' is not defined. (no-undef)\\n14:12 - Use import { isEmpty } from \\'@ember/utils\\'; instead of using Ember.isEmpty (ember/new-module-imports)\\n15:9 - Unexpected console statement. (no-console)\\n23:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n27:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n35:18 - Use import { resolve } from \\'rsvp\\'; instead of using Ember.RSVP.resolve (ember/new-module-imports)\\n35:18 - \\'Ember\\' is not defined. (no-undef)\\n35:37 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n35:37 - \\'Ember\\' is not defined. (no-undef)\\n38:21 - \\'data\\' is defined but never used. (no-unused-vars)\\n42:12 - Use import { resolve } from \\'rsvp\\'; instead of using Ember.RSVP.resolve (ember/new-module-imports)\\n42:12 - \\'Ember\\' is not defined. (no-undef)\\n42:31 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n42:31 - \\'Ember\\' is not defined. (no-undef)');\n  });\n  QUnit.test('components/channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/channel.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/chat.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/chat.js should pass ESLint\\n\\n6:9 - Use import { computed } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n6:19 - \\'observer\\' is assigned a value but never used. (no-unused-vars)\\n6:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n21:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n22:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n25:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n26:11 - \\'currentUserIdentifier\\' is assigned a value but never used. (no-unused-vars)\\n27:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n28:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n28:15 - \\'model\\' is assigned a value but never used. (no-unused-vars)\\n29:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n30:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n31:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n31:15 - \\'message_sent\\' is assigned a value but never used. (no-unused-vars)\\n33:11 - \\'sender\\' is assigned a value but never used. (no-unused-vars)\\n34:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n35:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n37:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n38:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n39:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n40:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n41:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n43:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n60:7 - \\'test\\' is assigned a value but never used. (no-unused-vars)\\n62:3 - Unexpected console statement. (no-console)\\n66:7 - \\'hostName\\' is assigned a value but never used. (no-unused-vars)\\n80:4 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n85:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n86:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n87:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n87:8 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n88:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n89:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n90:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n91:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n94:5 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n95:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n97:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n98:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('components/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/contact.js should pass ESLint\\n\\n4:10 - \\'set\\' is defined but never used. (no-unused-vars)\\n6:9 - Use import { computed } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n6:9 - \\'computed\\' is assigned a value but never used. (no-unused-vars)\\n6:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n6:19 - \\'observer\\' is assigned a value but never used. (no-unused-vars)\\n16:7 - \\'model\\' is assigned a value but never used. (no-unused-vars)');\n  });\n  QUnit.test('components/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/main.js should pass ESLint\\n\\n3:9 - Use import { computed } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n3:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n3:19 - \\'observer\\' is assigned a value but never used. (no-unused-vars)\\n3:32 - \\'Ember\\' is not defined. (no-undef)\\n4:9 - \\'alias\\' is assigned a value but never used. (no-unused-vars)');\n  });\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass ESLint\\n\\n4:16 - Use import Controller from \\'@ember/controller\\'; instead of using Ember.Controller (ember/new-module-imports)');\n  });\n  QUnit.test('controllers/channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/channel.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/contact.js should pass ESLint\\n\\n2:8 - \\'Ember\\' is defined but never used. (no-unused-vars)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n2:8 - \\'jQuery\\' is defined but never used. (no-unused-vars)\\n6:9 - Use import { computed } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n6:9 - \\'computed\\' is assigned a value but never used. (no-unused-vars)\\n6:19 - \\'observer\\' is assigned a value but never used. (no-unused-vars)\\n6:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n8:16 - Use import Controller from \\'@ember/controller\\'; instead of using Ember.Controller (ember/new-module-imports)\\n10:2 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n18:25 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)\\n24:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n25:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n26:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n26:11 - Unexpected console statement. (no-console)\\n27:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n28:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n28:11 - Unexpected console statement. (no-console)\\n29:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('controllers/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/main.js should pass ESLint\\n\\n2:8 - \\'jQuery\\' is defined but never used. (no-unused-vars)\\n5:9 - Use import { computed } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n5:19 - \\'observer\\' is assigned a value but never used. (no-unused-vars)\\n5:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n6:9 - \\'alias\\' is assigned a value but never used. (no-unused-vars)\\n8:16 - Use import Controller from \\'@ember/controller\\'; instead of using Ember.Controller (ember/new-module-imports)\\n29:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n32:34 - \\'index\\' is defined but never used. (no-unused-vars)\\n35:5 - Use import { set } from \\'@ember/object\\'; instead of using Ember.set (ember/new-module-imports)\\n37:5 - Use import { set } from \\'@ember/object\\'; instead of using Ember.set (ember/new-module-imports)\\n41:3 - Unexpected console statement. (no-console)\\n42:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n45:21 - Use import { observer } from \\'@ember/object\\'; instead of using Ember.observer (ember/new-module-imports)\\n47:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n47:8 - \\'$\\' is not defined. (no-undef)\\n48:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n49:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n50:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n50:7 - \\'$\\' is not defined. (no-undef)\\n51:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n55:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n56:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n56:6 - \\'$\\' is not defined. (no-undef)\\n59:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n77:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n78:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('controllers/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/register.js should pass ESLint\\n\\n2:17 - \\'not\\' is defined but never used. (no-unused-vars)\\n4:9 - Use import { computed } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n4:9 - \\'computed\\' is assigned a value but never used. (no-unused-vars)\\n4:19 - \\'observer\\' is assigned a value but never used. (no-unused-vars)\\n4:19 - Use import { observer } from \\'@ember/object\\'; instead of using Ember destructuring (ember/new-module-imports)\\n6:16 - Use import Controller from \\'@ember/controller\\'; instead of using Ember.Controller (ember/new-module-imports)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n19:4 - Use import $ from \\'jquery\\'; instead of using Ember.$ (ember/new-module-imports)\\n20:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n21:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n22:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n23:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n23:18 - \\'response\\' is defined but never used. (no-unused-vars)\\n24:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n25:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n25:14 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n26:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n26:14 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n27:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n27:14 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n28:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n28:14 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n29:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n29:19 - \\'response\\' is defined but never used. (no-unused-vars)\\n30:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n31:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('models/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/main.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/selected-user-chat.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/selected-user-chat.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/user-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user-data.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass ESLint\\n\\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n13:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n16:30 - Use snake case in dynamic segments of routes (ember/routes-segments-snake-case)');\n  });\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n2:8 - \\'Route\\' is defined but never used. (no-unused-vars)\\n3:8 - \\'jQuery\\' is defined but never used. (no-unused-vars)\\n6:16 - Use import Route from \\'@ember/routing/route\\'; instead of using Ember.Route (ember/new-module-imports)');\n  });\n  QUnit.test('routes/channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/channel.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/chat.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/chat.js should pass ESLint\\n\\n3:8 - \\'Ember\\' is defined but never used. (no-unused-vars)\\n8:8 - \\'params\\' is defined but never used. (no-unused-vars)\\n9:3 - Unexpected console statement. (no-console)\\n13:14 - \\'userId\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/contact.js should pass ESLint\\n\\n3:8 - \\'Ember\\' is defined but never used. (no-unused-vars)\\n9:3 - Unexpected console statement. (no-console)\\n10:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n11:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n13:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n16:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n17:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n18:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n22:14 - \\'userId\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass ESLint\\n\\n2:8 - \\'DS\\' is defined but never used. (no-unused-vars)\\n8:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n9:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n11:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n20:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n39:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('routes/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/main.js should pass ESLint\\n\\n3:8 - \\'Ember\\' is defined but never used. (no-unused-vars)\\n17:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n18:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n34:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n35:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n36:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n37:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n38:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n39:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n40:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n45:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n46:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('routes/register.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/activate-login-icon.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/activate-login-icon.js should pass ESLint\\n\\n11:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n16:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('services/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/get-service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/get-service.js should pass ESLint\\n\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n16:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n  QUnit.test('services/websocket.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/websocket.js should pass ESLint\\n\\n9:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n11:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n12:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n14:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n15:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n17:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n19:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n20:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n21:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n24:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n25:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n25:6 - Unexpected console statement. (no-console)\\n29:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n29:6 - Unexpected console statement. (no-console)\\n30:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n30:6 - Unexpected console statement. (no-console)\\n31:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n35:3 - Unexpected console statement. (no-console)\\n36:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n36:6 - Unexpected console statement. (no-console)');\n  });\n});","define(\"frontend/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('frontend/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'frontend/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('frontend/templates/channel.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'frontend/templates/channel.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('frontend/templates/chat.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'frontend/templates/chat.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('frontend/templates/components/channel.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'frontend/templates/components/channel.hbs should pass TemplateLint.\\n\\nfrontend/templates/components/channel.hbs\\n  6:1  error  Incorrect indentation for `{{#each}}` beginning at L6:C1. Expected `{{#each}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n  7:2  error  Incorrect indentation for `<a>` beginning at L7:C2. Expected `<a>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  7:33  error  Incorrect indentation for `\\n\\t\\t\\t- ` beginning at L7:C33. Expected `\\n\\t\\t\\t- ` to be at an indentation of 4 but was found at 3.  block-indentation\\n  4:46  error  img tags must have an alt attribute  img-alt-attributes\\n');\n  });\n  QUnit.test('frontend/templates/components/chat.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'frontend/templates/components/chat.hbs should pass TemplateLint.\\n\\nfrontend/templates/components/chat.hbs\\n  2:1  error  Incorrect indentation for `{{#if}}` beginning at L2:C1. Expected `{{#if}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n  11:1  error  Incorrect indentation for `<hr>` beginning at L11:C1. Expected `<hr>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  12:1  error  Incorrect indentation for `<div>` beginning at L12:C1. Expected `<div>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  3:2  error  Incorrect indentation for `<div>` beginning at L3:C2. Expected `<div>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  7:2  error  Incorrect indentation for `<div>` beginning at L7:C2. Expected `<div>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  4:3  error  Incorrect indentation for `{{item.message}}` beginning at L4:C3. Expected `{{item.message}}` to be at an indentation of 4 but was found at 3.  block-indentation\\n  8:3  error  Incorrect indentation for `{{item.message}}` beginning at L8:C3. Expected `{{item.message}}` to be at an indentation of 4 but was found at 3.  block-indentation\\n  13:2  error  Incorrect indentation for `<form>` beginning at L13:C2. Expected `<form>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  14:3  error  Incorrect indentation for `<button>` beginning at L14:C3. Expected `<button>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  15:3  error  Incorrect indentation for `{{input}}` beginning at L15:C3. Expected `{{input}}` to be at an indentation of 4 but was found at 3.  block-indentation\\n');\n  });\n  QUnit.test('frontend/templates/components/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'frontend/templates/components/contact.hbs should pass TemplateLint.\\n\\nfrontend/templates/components/contact.hbs\\n  6:0  error  Incorrect indentation for `{{#each}}` beginning at L6:C0. Expected `{{#each}}` to be at an indentation of 2 but was found at 0.  block-indentation\\n  14:10  error  Incorrect indentation for `each` beginning at L6:C0. Expected `{{/each}}` ending at L14:C10 to be at an indentation of 0 but was found at 1.  block-indentation\\n  7:1  error  Incorrect indentation for `<a>` beginning at L7:C1. Expected `<a>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  8:2  error  Incorrect indentation for `{{#if}}` beginning at L8:C2. Expected `{{#if}}` to be at an indentation of 3 but was found at 2.  block-indentation\\n  9:3  error  Incorrect indentation for `<img>` beginning at L9:C3. Expected `<img>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  11:3  error  Incorrect indentation for `<img>` beginning at L11:C3. Expected `<img>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  4:47  error  img tags must have an alt attribute  img-alt-attributes\\n  9:3  error  img tags must have an alt attribute  img-alt-attributes\\n  11:3  error  img tags must have an alt attribute  img-alt-attributes\\n');\n  });\n  QUnit.test('frontend/templates/components/main.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'frontend/templates/components/main.hbs should pass TemplateLint.\\n\\nfrontend/templates/components/main.hbs\\n  3:1  error  Incorrect indentation for `<h1>` beginning at L3:C1. Expected `<h1>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  4:3  error  Incorrect indentation for `{{#each}}` beginning at L4:C3. Expected `{{#each}}` to be at an indentation of 2 but was found at 3.  block-indentation\\n');\n  });\n  QUnit.test('frontend/templates/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'frontend/templates/contact.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('frontend/templates/login.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'frontend/templates/login.hbs should pass TemplateLint.\\n\\nfrontend/templates/login.hbs\\n  2:0  error  Incorrect indentation for `<img>` beginning at L2:C0. Expected `<img>` to be at an indentation of 2 but was found at 0.  block-indentation\\n  3:0  error  Incorrect indentation for `<form>` beginning at L3:C0. Expected `<form>` to be at an indentation of 2 but was found at 0.  block-indentation\\n  11:0  error  Incorrect indentation for `<br>` beginning at L11:C0. Expected `<br>` to be at an indentation of 2 but was found at 0.  block-indentation\\n  12:0  error  Incorrect indentation for `{{#if}}` beginning at L12:C0. Expected `{{#if}}` to be at an indentation of 2 but was found at 0.  block-indentation\\n  18:0  error  Incorrect indentation for `{{#if}}` beginning at L18:C0. Expected `{{#if}}` to be at an indentation of 2 but was found at 0.  block-indentation\\n  4:3  error  Incorrect indentation for `{{input}}` beginning at L4:C3. Expected `{{input}}` to be at an indentation of 2 but was found at 3.  block-indentation\\n  5:3  error  Incorrect indentation for `{{input}}` beginning at L5:C3. Expected `{{input}}` to be at an indentation of 2 but was found at 3.  block-indentation\\n  6:1  error  Incorrect indentation for `<button>` beginning at L6:C1. Expected `<button>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  7:1  error  Incorrect indentation for `{{#link-to}}` beginning at L7:C1. Expected `{{#link-to}}` to be at an indentation of 2 but was found at 1.  block-indentation\\n  13:0  error  Incorrect indentation for `<div>` beginning at L13:C0. Expected `<div>` to be at an indentation of 2 but was found at 0.  block-indentation\\n  14:4  error  Incorrect indentation for `<span>` beginning at L14:C4. Expected `<span>` to be at an indentation of 2 but was found at 4.  block-indentation\\n  19:0  error  Incorrect indentation for `<h1>` beginning at L19:C0. Expected `<h1>` to be at an indentation of 2 but was found at 0.  block-indentation\\n  2:0  error  img tags must have an alt attribute  img-alt-attributes\\n  2:30  error  you must use double quotes in templates  quotes\\n  3:12  error  you must use double quotes in templates  quotes\\n  3:43  error  you must use double quotes in templates  quotes\\n  3:61  error  you must use double quotes in templates  quotes\\n  4:17  error  you must use double quotes in templates  quotes\\n  4:52  error  you must use double quotes in templates  quotes\\n  4:72  error  you must use double quotes in templates  quotes\\n  4:85  error  you must use double quotes in templates  quotes\\n  5:17  error  you must use double quotes in templates  quotes\\n  5:55  error  you must use double quotes in templates  quotes\\n  5:78  error  you must use double quotes in templates  quotes\\n  5:94  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('frontend/templates/main.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'frontend/templates/main.hbs should pass TemplateLint.\\n\\nfrontend/templates/main.hbs\\n  2:1  error  Incorrect indentation for `<div>` beginning at L2:C1. Expected `<div>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  16:1  error  Incorrect indentation for `<div>` beginning at L16:C1. Expected `<div>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  29:1  error  Incorrect indentation for `<div>` beginning at L29:C1. Expected `<div>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  3:2  error  Incorrect indentation for `<img>` beginning at L3:C2. Expected `<img>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  4:2  error  Incorrect indentation for `<div>` beginning at L4:C2. Expected `<div>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  7:4  error  Incorrect indentation for `<a>` beginning at L7:C4. Expected `<a>` to be at an indentation of 6 but was found at 4.  block-indentation\\n  8:4  error  Incorrect indentation for `<a>` beginning at L8:C4. Expected `<a>` to be at an indentation of 6 but was found at 4.  block-indentation\\n  9:4  error  Incorrect indentation for `{{#if}}` beginning at L9:C4. Expected `{{#if}}` to be at an indentation of 6 but was found at 4.  block-indentation\\n  17:2  error  Incorrect indentation for `{{#if}}` beginning at L17:C2. Expected `{{#if}}` to be at an indentation of 3 but was found at 2.  block-indentation\\n  26:2  error  Incorrect indentation for `<Contact>` beginning at L26:C2. Expected `<Contact>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  27:2  error  Incorrect indentation for `<Channel>` beginning at L27:C2. Expected `<Channel>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  18:3  error  Incorrect indentation for `<div>` beginning at L18:C3. Expected `<div>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  22:3  error  Incorrect indentation for `<div>` beginning at L22:C3. Expected `<div>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  19:6  error  Incorrect indentation for `<img>` beginning at L19:C6. Expected `<img>` to be at an indentation of 5 but was found at 6.  block-indentation\\n  23:6  error  Incorrect indentation for `<img>` beginning at L23:C6. Expected `<img>` to be at an indentation of 5 but was found at 6.  block-indentation\\n  30:2  error  Incorrect indentation for `<div>` beginning at L30:C2. Expected `<div>` to be at an indentation of 3 but was found at 2.  block-indentation\\n  31:3  error  Incorrect indentation for `<Chat>` beginning at L31:C3. Expected `<Chat>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  3:2  error  img tags must have an alt attribute  img-alt-attributes\\n  19:6  error  img tags must have an alt attribute  img-alt-attributes\\n  23:6  error  img tags must have an alt attribute  img-alt-attributes\\n  4:24  error  elements cannot have inline styles  no-inline-styles\\n  19:89  error  Interaction added to non-interactive element  no-invalid-interactive\\n  23:86  error  Interaction added to non-interactive element  no-invalid-interactive\\n  2:12  error  you must use double quotes in templates  quotes\\n  10:14  error  you must use double quotes in templates  quotes\\n');\n  });\n  QUnit.test('frontend/templates/register.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'frontend/templates/register.hbs should pass TemplateLint.\\n\\nfrontend/templates/register.hbs\\n  4:1  error  Incorrect indentation for `<img>` beginning at L4:C1. Expected `<img>` to be at an indentation of 2 but was found at 1.  block-indentation\\n  5:0  error  Incorrect indentation for `<form>` beginning at L5:C0. Expected `<form>` to be at an indentation of 2 but was found at 0.  block-indentation\\n  11:3  error  Incorrect indentation for `<button>` beginning at L11:C3. Expected `<button>` to be at an indentation of 4 but was found at 3.  block-indentation\\n  4:1  error  img tags must have an alt attribute  img-alt-attributes\\n  9:63  error  Unnecessary string concatenation. Use {{unless isValid \\'disabled\\'}} instead of \"{{unless isValid \\'disabled\\'}}\".  no-unnecessary-concat\\n  4:31  error  you must use double quotes in templates  quotes\\n  5:12  error  you must use double quotes in templates  quotes\\n  5:43  error  you must use double quotes in templates  quotes\\n  5:77  error  you must use double quotes in templates  quotes\\n  6:16  error  you must use double quotes in templates  quotes\\n  6:59  error  you must use double quotes in templates  quotes\\n  7:16  error  you must use double quotes in templates  quotes\\n  7:60  error  you must use double quotes in templates  quotes\\n  8:16  error  you must use double quotes in templates  quotes\\n  8:63  error  you must use double quotes in templates  quotes\\n  8:79  error  you must use double quotes in templates  quotes\\n  9:81  error  you must use double quotes in templates  quotes\\n');\n  });\n});","define(\"frontend/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/channel-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/main-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/main-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/channel-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/mixins/activate-login-icon-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/activate-login-icon-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/contacts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/contacts-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/session-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/session-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/user-data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-data-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/channel-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/main-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/main-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/activate-login-icon-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/activate-login-icon-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"frontend/tests/test-helper\", [\"frontend/app\", \"frontend/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"frontend/tests/unit/controllers/channel-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | channel', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:channel');\n      assert.ok(controller);\n    });\n  });\n});","define(\"frontend/tests/unit/controllers/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:contact');\n      assert.ok(controller);\n    });\n  });\n});","define(\"frontend/tests/unit/controllers/register-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | register', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:register');\n      assert.ok(controller);\n    });\n  });\n});","define(\"frontend/tests/unit/mixins/activate-login-icon-test\", [\"frontend/mixins/activate-login-icon\", \"qunit\"], function (_activateLoginIcon, _qunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Mixin | activateLoginIcon', function () {\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', function (assert) {\n      let ActivateLoginIconObject = Ember.Object.extend(_activateLoginIcon.default);\n      let subject = ActivateLoginIconObject.create();\n      assert.ok(subject);\n    });\n  });\n});","define(\"frontend/tests/unit/models/contacts-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | contacts', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('contacts', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"frontend/tests/unit/models/session-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | session', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('session', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"frontend/tests/unit/models/user-data-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | user data', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('user-data', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"frontend/tests/unit/routes/channel-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | channel', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:channel');\n      assert.ok(route);\n    });\n  });\n});","define(\"frontend/tests/unit/routes/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:contact');\n      assert.ok(route);\n    });\n  });\n});","define(\"frontend/tests/unit/routes/login-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:login');\n      assert.ok(route);\n    });\n  });\n});","define(\"frontend/tests/unit/routes/main-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | main', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:main');\n      assert.ok(route);\n    });\n  });\n});","define(\"frontend/tests/unit/routes/register-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | register', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:register');\n      assert.ok(route);\n    });\n  });\n});","define(\"frontend/tests/unit/services/activate-login-icon-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Service | activate-login-icon', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:activate-login-icon');\n      assert.ok(service);\n    });\n  });\n});","define('frontend/config/environment', [], function() {\n  var prefix = 'frontend';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}